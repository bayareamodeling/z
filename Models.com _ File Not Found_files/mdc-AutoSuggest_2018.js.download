/**
 *  author:		Timothy Groves - http://www.brandspankingnew.net
 *	version:	2.1.3 - 2007-07-19
 *	
 *	MAJOR MODIFICTIONS 4/2009 BayAreaModels.news
 *   ADDED CATEGORY FUNCTIONS 4/2014 MHD
 *  OVERHAULED AGAIN 01/2016 to create more flexible multi-column layout
 */


if (typeof(bsn) == "undefined")
	_b = bsn = {};

if (typeof(_b.Autosuggest) == "undefined")
	_b.Autosuggest = {};
else
	alert("Autosuggest is already set!");

_b.AutoSuggest = function (id, param) {
	// no DOM - give up!
	//
	this.fld = jQuery('#'+id)[0];
	if (!this.fld)
		return 0;
	// init variables
	//
	this.sInp	= "";
	this.nInpC	= 0;
	this.aSug	= [];
	this.iHigh	= 0;
	this.KeyD	= 0;
	this.KeyP	= 0;
	// parameters object
	//
	this.oP = param ? param : {};
	// defaults	
	//
	var k, def = {minchars:1, varname:"input", className:"search-main", listID:"as_ul", spanID:"AS_ResultsHolder", divID:"autosuggest", timeout:2500, delay:500, offsety:-5, shownoresults: true, noresults: "No results!", maxheight: 250, cache: false, maxentries: 25};
	for (k in def)
	{
		if (typeof(this.oP[k]) != typeof(def[k]))
			this.oP[k] = def[k];
	}
	if (typeof(divIDArray) != "undefined") {
		divIDArray[divIDArray.length] = [this.oP.divID];
	} else {
		divIDArray = [this.oP.divID];
	}
	
	// set keyup handler for field
	// and prevent autocomplete from client
	var p = this;
	var fldVal = this.fld.value;
	this.fld.onkeydown		= function(ev){ return p.onKeyDown(ev); };
	this.fld.onkeypress		= function(ev){ return p.onKeyPress(ev);  };
	this.fld.onkeyup		= function(ev){ return p.onKeyUp(ev); };
	this.fld.onclick		= function(ev) {return p.onClick(ev); };
	this.fld.onfocus		= function() {return p.onFocus(); };
	document.body.onclick	= function() {return p.onBlur(); };
	this.fld.setAttribute("autocomplete","off");
	
};

_b.AutoSuggest.prototype.onKeyDown = function(ev) {
	var key = (window.event) ? window.event.keyCode : ev.keyCode;
	var ARRLT = 37;
	var ARRUP = 38;
	var ARRRT = 39;
	var ARRDN = 40;
	var bubble = 1;
	this.KeyD = 1;
	switch(key)
	{
		case ARRUP:
			this.changeHighlight(key); bubble = 0; break;
		case ARRLT:
			this.changeHighlight(key); bubble = 0; break;
		case ARRRT:
			this.changeHighlight(key); bubble = 0; break;
		case ARRDN:
			this.changeHighlight(key); bubble = 0; break;
	}
	return bubble;
};

_b.AutoSuggest.prototype.onKeyUp = function(ev) {
	var key = (window.event) ? window.event.keyCode : ev.keyCode;
	this.KeyD = 0;
	this.KeyP = 0;
	var RETURN = 13;
	var TAB = 9;
	var ESC = 27;
	var ARRLT = 37;
	var ARRUP = 38;
	var ARRRT = 39;
	var ARRDN = 40;
	var bubble = 1;
	// console.log(this.iHigh);
	switch(key)
	{
		case ARRLT:
			bubble = 0; break;
		case ARRUP:
			bubble = 0; break;
		case ARRRT:
			bubble = 0; break;
		case ARRDN:
			bubble = 0; break;
		case RETURN:
			if (this.iHigh === 0) {
				return true;
			} else {
				this.setHighlightedValue();
				bubble = 0; return false;
			}  break;
		case ESC:
			this.clearSuggestions();
			bubble = 0;
			this.fld.blur();
			break;
	default:
		this.getSuggestions(this.fld.value);
	}
	return bubble;
};

_b.AutoSuggest.prototype.onKeyPress = function(ev) {
	if (this.KeyD == 1 && this.KeyP == 1) {
		var key = (window.event) ? window.event.keyCode : ev.keyCode;
		var ARRLT = 37;
		var ARRUP = 38;
		var ARRRT = 39;
		var ARRDN = 40;
		var bubble = 1;
		switch(key)
		{
			case ARRUP:
				this.changeHighlight(key); bubble = 0; break;
			case ARRLT:
				this.changeHighlight(key); bubble = 0; break;
			case ARRRT:
				this.changeHighlight(key); bubble = 0; break;
			case ARRDN:
				this.changeHighlight(key); bubble = 0; break;
		}
		return bubble;
	} else {
		this.KeyP = 1;
	}
};

_b.AutoSuggest.prototype.onFocus = function() {
	this.getSuggestions(this.fld.value);
}
_b.AutoSuggest.prototype.onClick = function(e) {
	if (!e) var e = window.event;
	e.cancelBubble = true;
	if (e.stopPropagation) e.stopPropagation();
}
_b.AutoSuggest.prototype.onBlur = function() {
	var pointer = this;
	pointer.clearSuggestions();
}

_b.AutoSuggest.prototype.getSuggestions = function (val) {
	_b.DOM.remE(this.idAs);
	this.clearSuggestions();
	this.sInp = val;
	// input length is less than the min required to trigger a request
	// do nothing
	//
	if (val.length < this.oP.minchars) {
		this.aSug = [];
		this.nInpC = val.length;
		return 0;
	}
	var ol = this.nInpC; // old length
	this.nInpC = val.length ? val.length : 0;
	// if caching enabled, and user is typing (ie. length of input is increasing)
	// filter results out of aSuggestions from last request
	//
	var l = this.aSug.length;
	if (this.nInpC > ol && l && l<this.oP.maxentries && this.oP.cache) {
		var arr = [];
		for (var i=0;i<l;i++) {
			var strVal = this.aSug[i].value.toLowerCase();
			if (strVal.search(val.toLowerCase()) >= 0)
				arr.push( this.aSug[i] );
		}
		this.aSug = arr;
		this.createList(this.aSug);
		return false;
	} else { // do new request
		var pointer = this;
		var input = this.sInp;
		clearTimeout(this.ajID);
		this.ajID = setTimeout( function() { pointer.doAjaxRequest(input) }, this.oP.delay );
	}
	return false;
};

_b.AutoSuggest.prototype.doAjaxRequest = function (input) {
	// check that saved input is still the value of the field
	//
	if (input != this.fld.value)
		return false;
	var pointer = this;
	// create ajax request
	//
	if (typeof(this.oP.script) == "function")
		var url = this.oP.script(encodeURIComponent(this.sInp));
	else
		var url = this.oP.script+this.oP.varname+"="+encodeURIComponent(this.sInp);
	if (!url)
		return false;
	var input = this.sInp;
	jQuery.ajax({
		url: url,
		async: false,
		success:function(data) { pointer.setSuggestions(data, input); },
		error:function(status) { if (status == 0) { return; } else { alert("AJAX error: "+status); } }
	});
};

_b.AutoSuggest.prototype.setSuggestions = function (req, input) {
	if (input != this.fld.value) // if field input no longer matches what was passed to the request don't show the suggestions
		return false;
	if (typeof req.results === 'undefined') // no results
		return false;
	this.aSug = [];
	for (var i=0;i<req.results.length;i++) {
		// alert(req.results[i].value); return;
		this.aSug.push(  { 'slug':req.results[i].slug,'catDivider':req.results[i].catDivider, 'col':req.results[i].col, 'value':req.results[i].text, 'info':req.results[i].html, 'resultCount':req.results[i].resultCount }  );
	}
	// this.idAs = "as_"+this.fld.id;
	this.idAs = this.oP.divID;
	this.createList(this.aSug);
};

_b.AutoSuggest.prototype.createList = function(arr) {
	var pointer = this;
	// get rid of old list
	_b.DOM.remE(this.idAs);
	// and clear the list removal timeout
	this.killTimeout();
	// if no results, and shownoresults is false, do nothing
	if (arr.length == 0 && !this.oP.shownoresults)
		return false;
	// create holding div
	var div = _b.DOM.cE("div", {id:this.idAs, className:this.oP.className});
	var hcorner = _b.DOM.cE("div", {className:"as_corner"});
	var hbar = _b.DOM.cE("div", {className:"as_bar"});
	// create and populate 
	var div2 = _b.DOM.cE("div", {className:"search-ul"});
	var ul = new Array();
	
	// ul[2] = _b.DOM.cE("ul", {className:"search-col2"});
	// ul[3] = _b.DOM.cE("ul", {className:"search-col3"});
	var catCol = 0;
	for (var i=0;i<arr.length;i++) {
		if (arr[i].col != catCol) {
			catCol = arr[i].col;
			ul[catCol] = _b.DOM.cE("ul", {className:"search-col"+catCol});
		}
		// format output with the input enclosed in a EM element
		// (as HTML, not DOM)
		var val = arr[i].value;
		var st = val.toLowerCase().indexOf( this.sInp.toLowerCase() );
		if (st >= 0) {
			var output = val.substring(0,st) + "<em>" + val.substring(st, st+this.sInp.length) + "</em>" + val.substring(st+this.sInp.length);
		} else {
			var output = val;
		}
		var brOutput = output.replace(/-\|-/g, "<br>");
		var srR = brOutput.lastIndexOf("<br>");
		if (srR > 0 && brOutput.length - srR > 5) {
			var cbrOutput = brOutput.substring(0,srR)+'<span style="display:inline;font-size:.7rem;">'+brOutput.substring(srR,brOutput.length)+'</span>';
		} else {
			var cbrOutput = brOutput;
		}
		var htmlOutput = cbrOutput.replace(/&gt;/gi, ">").replace(/&lt;/gi, "<");
		var spanresults		= _b.DOM.cE("div", {}, htmlOutput, true);
		var divResults 		= _b.DOM.cE("div", {className:"results"});
		if (arr[i].info != "") {
			var MDCimg			= _b.DOM.cE("img", {});
			MDCimg.src = "//i.mdel.net/i/db/" + arr[i].info;
			divResults.appendChild(MDCimg);
			divResults.appendChild(spanresults);
		} else if (arr[i].catDivider == 1) {
			divResults.className = "results catDivider";
			divResults.appendChild(spanresults);
		} else if (val.substring(0, 10) == 'No results') {
			divResults.className = "results noResults";
			divResults.appendChild(spanresults);
		}
		if(!isNaN(arr[i].slug)){ arr[i].slug = arr[i].slug.toString(); }
		if (arr[i].slug.indexOf("/") > 0) {
			var a = _b.DOM.cE("a", { href:"//BayAreaModels.news/" + arr[i].slug });
		} else if (arr[i].slug.length === 0 & val != 'No results') {
			var a = _b.DOM.cE("span", {className:"catSpan"});
		} else if (val != 'No results') {
			var a = _b.DOM.cE("a", { href: arr[i].slug });
		} else {
			var a = _b.DOM.cE("span", {className:"noResultsSpan"});
		}
		a.dataset.id = arr[i].slug;
		a.appendChild(divResults);
		a.id = 'col'+catCol+'-'+arr[i].resultCount;
		if (arr[i].resultCount > 0) {a.onclick = function () { pointer.setHighlightedValue(); return false; };};
		a.onmouseover = function () { pointer.setHighlight(this.id,null); };
		var li = _b.DOM.cE(  "li", {className:"catCol"+catCol}, a  );
		ul[catCol].appendChild( li );
	}
	for (var i=1;i<ul.length;i++) {
		if (ul.length === 2) {ul[i].className = "search-col";} // remove multi column class if only one column of results
		div2.appendChild( ul[i] );
	}
	div.appendChild( div2 );

	// set mouseover functions for div
	div.onmouseover 	= function(){ pointer.killTimeout() }; // when mouse enters div, kill the timeout so the list won't be removed
	div.onmouseout 		= function(){ pointer.resetTimeout() }; // when mouse pointer leaves div, set a timeout to remove the list after an interval
	// add DIV to document
	document.getElementById(this.oP.spanID).appendChild(div);
	// currently no item is highlighted
	//
	this.iHigh = 0;
	// remove list after an interval
	var pointer = this;
	this.toID = setTimeout(function () { pointer.clearSuggestions() }, this.oP.timeout);
};


_b.AutoSuggest.prototype.changeHighlight = function(key) {
	// create array of elements
	var n;
	var list = [];
	var arrList = [];
	var currColCnt = 0;
	jQuery("#"+this.idAs+" .search-ul").find("ul").find("a").each(function(i) {
		currCol = jQuery(this).attr("id").substring(3, 4);
		if (currCol != currColCnt) {
			arrList[currCol] = [];
			currColCnt = currCol;
		}
		list.push(jQuery(this).attr("id"));
		arrList[currCol].push(jQuery(this).attr("id"));
	});
	var listFind = jQuery.inArray(this.iHigh,list);
	if (key == 40) { // + 1
		if (jQuery.inArray(this.iHigh,list) < 0) {
			n = list[0];
		} else if (jQuery.inArray(this.iHigh,list) == list.length-1) {
			n = list[0];
		} else {
			n = list[jQuery.inArray(this.iHigh,list)+1];
		}
	} else if (key == 38) { // - 1
		if (jQuery.inArray(this.iHigh,list) <= 0) {
			n = list[list.length-1];
		} else {
			n = list[jQuery.inArray(this.iHigh,list)-1];
		}
	} else if (key == 37) { // LEFT
		if (jQuery.inArray(this.iHigh,list) < 0) {
			n = list[0];
		} else {
			currCol = Number(list[listFind].substring(3, 4));
			currCnt = jQuery.inArray(this.iHigh,arrList[currCol]);
			if (currCol-1 > 0) { newCol = currCol-1; } else { newCol = arrList.length-1; }
			if(typeof arrList[newCol][currCnt] != 'undefined') {
				n=arrList[newCol][currCnt];
			} else if (currCnt > arrList[newCol].length-1) {
				n=arrList[newCol][arrList[newCol].length-1];
			} else {
				n=arrList[newCol][1];
			}
		}
	} else if (key == 39) { // RIGHT
		if (listFind < 0) {
			n = list[list.length-1];
		} else {
			currCol = Number(list[listFind].substring(3, 4));
			currCnt = jQuery.inArray(this.iHigh,arrList[currCol]);
			if (currCol+1 <= arrList.length-1) { newCol = currCol+1; } else { newCol = 1; }
			if(typeof arrList[newCol][currCnt] != 'undefined') {
				n=arrList[newCol][currCnt];
			} else if (currCnt > arrList[newCol].length-1) {
				n=arrList[newCol][arrList[newCol].length-1];
			} else {
				n=arrList[newCol][1];
			}
		}
	}
	if(typeof n != 'undefined') {
		this.setHighlight(n,key);
	}
};

_b.AutoSuggest.prototype.setHighlight = function(n,key) {
	this.clearHighlight();
	this.iHigh = n;
	jQuery('#'+this.iHigh).closest('li').addClass("as_highlight");
	// return false;
	var list = jQuery("#"+this.idAs+" .search-ul");
	if (!list)
		return false;
	var listHeight = list.height();
	var listScrollTop = list.scrollTop();
	CurResultposition = jQuery("#"+[this.iHigh]).position();
	CurResultTop = CurResultposition.top+4; //+4; // +4 is for top position change of ul
	var CurResultHeight = jQuery("#"+[this.iHigh]).height();
	if (key !== null) { // only change scrolltop when using keyboard
		if(CurResultTop<listScrollTop) {
			list.scrollTop(CurResultTop-CurResultHeight);
		} else if(CurResultTop+CurResultHeight>listScrollTop+listHeight) {
			list.scrollTop(CurResultTop+CurResultHeight-listHeight);
			if(listScrollTop<0) {list.scrollTop(0);}
		}
	}
	this.killTimeout();
};

_b.AutoSuggest.prototype.clearHighlight = function() {
	if (this.iHigh != 0) { // console.log(this.iHigh);
		jQuery('#'+this.iHigh).closest('li').removeClass("as_highlight");
		this.iHigh = 0;
	}
};


_b.AutoSuggest.prototype.setHighlightedValue = function () {
	if (this.iHigh) {
		var thisID  = jQuery("#"+this.iHigh).data("id");
		if (thisID.length !== 0) {
			var currVal = this.fld.value;
			for (var i = 0; i < this.aSug.length; i++) {
				if (this.aSug[i].slug == thisID) {
					this.sInp = this.fld.value = this.aSug[i].value;
				}
			}
			// move cursor to end of input (safari)
			this.fld.focus();
			this.clearSuggestions();
			// pass selected object to callback function, if exists
			if (typeof(this.oP.callback) == "function") {
				this.oP.callback( thisID , currVal, this.iHigh, this.fld.value);
			}
		}
	}
};


_b.AutoSuggest.prototype.killTimeout = function() {
	clearTimeout(this.toID);
};

_b.AutoSuggest.prototype.resetTimeout = function() {
	clearTimeout(this.toID);
	var pointer = this;
	this.toID = setTimeout(function () { pointer.clearSuggestions() }, this.oP.timeout);
};


_b.AutoSuggest.prototype.clearSuggestions = function () {
	this.iHigh = 0;
	this.killTimeout();
	var xOx;
	for (xOx in divIDArray) {
		var ele = document.getElementById(divIDArray[xOx]);
		// alert(divIDArray[xOx] + "= " +ele+ "= " +document.getElementById(divIDArray[xOx]));
		if (ele && typeof(ele.appendChild) != "undefined") {
			_b.DOM.remE(ele);
		}
	}
};


// DOM PROTOTYPE _____________________________________________

if (typeof(_b.DOM) == "undefined")
	_b.DOM = {};

/* create element */
_b.DOM.cE = function ( type, attr, cont, html ) {
	var ne = document.createElement( type );
	if (!ne)
		return 0;
	for (var a in attr)
		ne[a] = attr[a];
	var t = typeof(cont);
	if (t == "string" && !html)
		ne.appendChild( document.createTextNode(cont) );
	else if (t == "string" && html)
		ne.innerHTML = cont;
	else if (t == "object")
		ne.appendChild( cont );
	return ne;
};

/* get element */
_b.DOM.gE = function ( e ) {
	var t=typeof(e);
	if (t == "undefined")
		return 0;
	else if (t == "string") {
		var re = document.getElementById( e );
		// if (e == "uisearchr" | e == "searchr") {alert(re);}
		if (!re)
			return 0;
		else if (typeof(re.appendChild) != "undefined" )
			return re;
		else
			return 0;
	}
	else if (typeof(e.appendChild) != "undefined")
		return e;
	else
		return 0;
};

/* remove element */
_b.DOM.remE = function ( ele ) {
	var e = this.gE(ele);
	if (!e)
		return 0;
	else if (e.parentNode.removeChild(e))
	// else if (e.parentNode.parentNode.removeChild(e.parentNode))
		return true;
	else
		return 0;
};
